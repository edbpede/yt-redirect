---
import '../styles/global.css';
import { defaultLang, getTranslations } from '../i18n/utils';

const translations = getTranslations(defaultLang);
---

<!DOCTYPE html>
<html lang={defaultLang}>
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<meta name="generator" content={Astro.generator} />
		<meta name="description" content={translations.app.description} />
		<meta name="theme-color" content="#ef4444" />
		<meta name="color-scheme" content="light dark" />
		<title>{translations.app.title}</title>

		<!-- Critical CSS - Inlined for instant rendering -->
		<style is:inline>
			/* Critical base styles */
			*,::before,::after{box-sizing:border-box;margin:0;padding:0}
			html{font-family:system-ui,-apple-system,BlinkMacSystemFont,'Segoe UI',Roboto,Oxygen,Ubuntu,Cantarell,'Open Sans','Helvetica Neue',sans-serif;line-height:1.5;-webkit-text-size-adjust:100%}
			body{min-height:100vh;background:linear-gradient(to bottom right,#f8fafc,#e2e8f0)}

			/* Critical layout */
			.min-h-screen{min-height:100vh}
			.flex{display:flex}
			.items-center{align-items:center}
			.justify-center{justify-content:center}
			.text-center{text-align:center}

			/* Critical colors and spacing */
			.bg-white{background-color:#fff}
			.text-slate-800{color:#1e293b}
			.rounded-2xl{border-radius:1rem}
			.shadow-2xl{box-shadow:0 25px 50px -12px rgba(0,0,0,.25)}

			/* Dark mode critical styles */
			@media (prefers-color-scheme:dark){
				body{background:linear-gradient(to bottom right,#0f172a,#1e293b)}
				.dark\:bg-slate-800{background-color:#1e293b}
				.dark\:text-white{color:#fff}
			}
		</style>
	</head>
	<body class="min-h-screen bg-gradient-to-br from-slate-50 to-slate-100 dark:from-slate-900 dark:to-slate-800">
		<!-- Language Switcher -->
		<div class="absolute top-4 right-4 sm:top-6 sm:right-6">
			<div class="relative">
				<button
					id="language-button"
					type="button"
					class="flex items-center gap-2 px-4 py-2 bg-white dark:bg-slate-800 rounded-lg shadow-md hover:shadow-lg transition-all duration-200 border border-slate-200 dark:border-slate-700"
					aria-label={translations.language.select}
				>
					<svg class="w-5 h-5 text-slate-600 dark:text-slate-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5h12M9 3v2m1.048 9.5A18.022 18.022 0 016.412 9m6.088 9h7M11 21l5-10 5 10M12.751 5C11.783 10.77 8.07 15.61 3 18.129"></path>
					</svg>
					<span id="current-language" class="text-sm font-medium text-slate-700 dark:text-slate-200"></span>
					<svg class="w-4 h-4 text-slate-500 dark:text-slate-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
					</svg>
				</button>
				<div
					id="language-menu"
					class="hidden absolute right-0 mt-2 w-40 bg-white dark:bg-slate-800 rounded-lg shadow-xl border border-slate-200 dark:border-slate-700 overflow-hidden z-10"
				>
					<button
						data-lang="da"
						class="language-option w-full text-left px-4 py-2 text-sm text-slate-700 dark:text-slate-200 hover:bg-slate-100 dark:hover:bg-slate-700 transition-colors"
					>
						üá©üá∞ Dansk
					</button>
					<button
						data-lang="en"
						class="language-option w-full text-left px-4 py-2 text-sm text-slate-700 dark:text-slate-200 hover:bg-slate-100 dark:hover:bg-slate-700 transition-colors"
					>
						üá¨üáß English
					</button>
				</div>
			</div>
		</div>

		<!-- Main Content -->
		<main class="flex items-center justify-center min-h-screen px-4 py-12">
			<div class="w-full max-w-2xl">
				<!-- Header -->
				<div class="text-center mb-8 sm:mb-12">
					<div class="inline-flex items-center justify-center w-16 h-16 sm:w-20 sm:h-20 bg-red-500 rounded-2xl mb-4 sm:mb-6 shadow-lg">
						<svg class="w-10 h-10 sm:w-12 sm:h-12 text-white" fill="currentColor" viewBox="0 0 24 24">
							<path d="M23.498 6.186a3.016 3.016 0 0 0-2.122-2.136C19.505 3.545 12 3.545 12 3.545s-7.505 0-9.377.505A3.017 3.017 0 0 0 .502 6.186C0 8.07 0 12 0 12s0 3.93.502 5.814a3.016 3.016 0 0 0 2.122 2.136c1.871.505 9.376.505 9.376.505s7.505 0 9.377-.505a3.015 3.015 0 0 0 2.122-2.136C24 15.93 24 12 24 12s0-3.93-.502-5.814zM9.545 15.568V8.432L15.818 12l-6.273 3.568z"/>
						</svg>
					</div>
					<h1 id="app-title" class="text-3xl sm:text-4xl md:text-5xl font-bold text-slate-800 dark:text-white mb-2 sm:mb-3">
						{translations.app.title}
					</h1>
					<p id="app-description" class="text-base sm:text-lg text-slate-600 dark:text-slate-300">
						{translations.app.description}
					</p>
				</div>

				<!-- Converter Form -->
				<div class="bg-white dark:bg-slate-800 rounded-2xl shadow-2xl p-6 sm:p-8 border border-slate-200 dark:border-slate-700">
					<form id="converter-form" class="space-y-4 sm:space-y-6">
						<!-- Input Field -->
						<div>
							<label for="youtube-url" class="sr-only" id="input-label">
								{translations.form.inputPlaceholder}
							</label>
							<input
								type="text"
								id="youtube-url"
								name="youtube-url"
								placeholder={translations.form.inputPlaceholder}
								class="w-full px-4 sm:px-6 py-3 sm:py-4 text-base sm:text-lg bg-slate-50 dark:bg-slate-900 border-2 border-slate-200 dark:border-slate-700 rounded-xl focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-transparent transition-all duration-200 text-slate-800 dark:text-white placeholder-slate-400 dark:placeholder-slate-500"
								autocomplete="off"
								spellcheck="false"
							/>
						</div>

						<!-- Error Message -->
						<div id="error-message" class="hidden p-4 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg">
							<p class="text-sm text-red-600 dark:text-red-400 flex items-start gap-2">
								<svg class="w-5 h-5 flex-shrink-0 mt-0.5" fill="currentColor" viewBox="0 0 20 20">
									<path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"/>
								</svg>
								<span id="error-text"></span>
							</p>
						</div>

						<!-- Submit Button -->
						<button
							type="submit"
							id="submit-button"
							class="w-full px-6 py-3 sm:py-4 bg-red-500 hover:bg-red-600 text-white font-semibold text-base sm:text-lg rounded-xl shadow-lg hover:shadow-xl transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 dark:focus:ring-offset-slate-800 disabled:opacity-50 disabled:cursor-not-allowed"
						>
							<span id="button-text">{translations.form.convertButton}</span>
						</button>
					</form>

					<!-- Info Box -->
					<div class="mt-6 sm:mt-8 p-4 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg">
						<p class="text-xs sm:text-sm text-blue-800 dark:text-blue-300">
							<strong>‚ÑπÔ∏è Tip:</strong> <span id="info-text">Paste any YouTube link format - we'll handle the conversion automatically!</span>
						</p>
					</div>
				</div>

				<!-- Footer -->
				<div class="text-center mt-8 text-sm text-slate-500 dark:text-slate-400">
					<p id="footer-text">
						{translations.footer.madeWith} ‚ù§Ô∏è
					</p>
				</div>
			</div>
		</main>

		<script>
			import { getCurrentLanguage, setLanguage, type Language } from '../i18n/utils';
			import { loadTranslations, tClient } from '../i18n/client-utils';
			import { convertYouTubeUrl, normalizeUrl } from '../utils/youtube-converter';

			// Initialize language
			let currentLang: Language = getCurrentLanguage();

			// DOM Elements
			const form = document.getElementById('converter-form') as HTMLFormElement;
			const input = document.getElementById('youtube-url') as HTMLInputElement;
			const submitButton = document.getElementById('submit-button') as HTMLButtonElement;
			const buttonText = document.getElementById('button-text') as HTMLSpanElement;
			const errorMessage = document.getElementById('error-message') as HTMLDivElement;
			const errorText = document.getElementById('error-text') as HTMLSpanElement;
			const languageButton = document.getElementById('language-button') as HTMLButtonElement;
			const languageMenu = document.getElementById('language-menu') as HTMLDivElement;
			const currentLanguageSpan = document.getElementById('current-language') as HTMLSpanElement;
			const languageOptions = document.querySelectorAll('.language-option') as NodeListOf<HTMLButtonElement>;

			// Update UI text based on current language
			async function updateUIText(): Promise<void> {
				// Load translations for current language
				await loadTranslations(currentLang);

				document.documentElement.lang = currentLang;
				document.title = tClient(currentLang, 'app.title');

				const appTitle = document.getElementById('app-title');
				const appDescription = document.getElementById('app-description');
				const inputLabel = document.getElementById('input-label');
				const infoText = document.getElementById('info-text');
				const footerText = document.getElementById('footer-text');

				if (appTitle) appTitle.textContent = tClient(currentLang, 'app.title');
				if (appDescription) appDescription.textContent = tClient(currentLang, 'app.description');
				if (inputLabel) inputLabel.textContent = tClient(currentLang, 'form.inputPlaceholder');
				if (input) input.placeholder = tClient(currentLang, 'form.inputPlaceholder');
				if (buttonText) buttonText.textContent = tClient(currentLang, 'form.convertButton');

				if (infoText) {
					infoText.textContent = currentLang === 'da'
						? 'Inds√¶t ethvert YouTube link format - vi h√•ndterer konverteringen automatisk!'
						: 'Paste any YouTube link format - we\'ll handle the conversion automatically!';
				}

				if (footerText) {
					footerText.textContent = tClient(currentLang, 'footer.madeWith') + ' ‚ù§Ô∏è';
				}

				currentLanguageSpan.textContent = currentLang === 'da' ? 'Dansk' : 'English';
			}

			// Show error message
			function showError(errorKey: string): void {
				errorText.textContent = tClient(currentLang, `errors.${errorKey}`);
				errorMessage.classList.remove('hidden');
			}

			// Hide error message
			function hideError(): void {
				errorMessage.classList.add('hidden');
			}

			// Handle form submission
			form.addEventListener('submit', (e: Event) => {
				e.preventDefault();
				hideError();

				const rawUrl = input.value.trim();

				if (!rawUrl) {
					showError('emptyInput');
					return;
				}

				// Normalize URL
				const normalizedUrl = normalizeUrl(rawUrl);

				// Convert URL
				const result = convertYouTubeUrl(normalizedUrl);

				if (!result.success || !result.convertedUrl) {
					showError(result.error || 'conversionFailed');
					return;
				}

				// Show converting state
				submitButton.disabled = true;
				buttonText.textContent = tClient(currentLang, 'form.converting');

				// Redirect to converted URL
				setTimeout(() => {
					window.location.href = result.convertedUrl!;
				}, 300);
			});

			// Clear error on input
			input.addEventListener('input', () => {
				hideError();
			});

			// Language switcher
			languageButton.addEventListener('click', () => {
				languageMenu.classList.toggle('hidden');
			});

			// Close menu when clicking outside
			document.addEventListener('click', (e: Event) => {
				if (!languageButton.contains(e.target as Node) && !languageMenu.contains(e.target as Node)) {
					languageMenu.classList.add('hidden');
				}
			});

			// Handle language selection
			languageOptions.forEach(option => {
				option.addEventListener('click', async () => {
					const lang = option.dataset.lang as Language;
					if (lang && (lang === 'da' || lang === 'en')) {
						currentLang = lang;
						setLanguage(lang);
						await updateUIText();
						languageMenu.classList.add('hidden');
					}
				});
			});

			// Initialize UI after DOM and stylesheets are loaded
			// This prevents Firefox warning: "Layout was forced before the page was fully loaded"
			if (document.readyState === 'loading') {
				document.addEventListener('DOMContentLoaded', updateUIText);
			} else {
				// DOM is already loaded, call immediately
				updateUIText();
			}
		</script>
	</body>
</html>
